{"mappings":"AAQA,MAAMA,YAAc,gBACdC,aAAe,mBACfC,aAAe,mBACfC,kBAAoB,IAC1B,IAAIC,aAAe,KAGnB,MAAMC,YAAcC,IACnBA,EAAMC,iBACN,MAAMC,EAAQC,SAASC,eACtBJ,EAAMK,OAAOC,aAAa,qBAEX,IAATJ,GAAiC,MAATA,GAAiBK,YAAYL,GACzDM,WAAWN,GACXO,UAAUP,IAIRK,YAAcL,MACZA,EAAMQ,aAAa,SAAyC,SAA9BR,EAAMI,aAAa,SAMnDG,UAAYP,IACbS,sBACHR,SAASS,gBAAgBC,MAAMC,YAC9B,oBAAmB,GAChBC,yBAGLZ,SAASS,gBAAgBI,UAAUC,IAAIvB,YAAaC,cACpDuB,YAAU,KACTpB,aAAeI,EACfC,SAASS,gBAAgBI,UAAUG,OAAOxB,gBAhClB,KAkCzBO,EAAMkB,aAAa,QAAQ,IAItBZ,WAAaN,IAClBJ,aAAe,KACfK,SAASS,gBAAgBI,UAAUC,IAAIrB,cACvCsB,YAAU,KACTf,SAASS,gBAAgBI,UAAUG,OAAOvB,aAAcF,aACxDS,SAASS,gBAAgBC,MAAMQ,eAAe,qBAC9CnB,EAAMoB,gBAAgB,UA5CE,MAiD1BnB,SAASoB,iBAAiB,SAASvB,IAClC,GAAoB,MAAhBF,aAAsB,EACJA,aAAa0B,cAAc,WACbC,SAASzB,EAAMK,SAChCG,WAAWV,kBAK/BK,SAASoB,iBAAiB,WAAWvB,IAClB,WAAdA,EAAM0B,KAAoC,MAAhB5B,cAC7BU,WAAWV,iBAKb,MAAMiB,kBAAiB,KAEtB,MAAMY,EAAQxB,SAASyB,cAAc,OACrCD,EAAMd,MAAMgB,WAAa,SACzBF,EAAMd,MAAMiB,SAAW,SACvBH,EAAMd,MAAMkB,gBAAkB,YAC9B5B,SAAS6B,KAAKC,YAAYN,GAG1B,MAAMO,EAAQ/B,SAASyB,cAAc,OACrCD,EAAMM,YAAYC,GAGlB,MAAMC,EAAiBR,EAAMS,YAAcF,EAAME,YAKjD,OAFAT,EAAMU,WAAWC,YAAYX,GAEtBQ,GAIFxB,mBAAkB,IAChBR,SAAS6B,KAAKO,aAAeC,OAAOC","sources":["word-game/src/res/js/modal.js"],"sourcesContent":["/*\n * Modal\n *\n * Pico.css - https://picocss.com\n * Copyright 2019-2021 - Licensed under MIT\n */\n\n// Config\nconst isOpenClass = 'modal-is-open';\nconst openingClass = 'modal-is-opening';\nconst closingClass = 'modal-is-closing';\nconst animationDuration = 400; // ms\nlet visibleModal = null;\n\n// Toggle modal\nconst toggleModal = event => {\n\tevent.preventDefault();\n\tconst modal = document.getElementById(\n\t\tevent.target.getAttribute('data-target')\n\t);\n\ttypeof modal != 'undefined' && modal != null && isModalOpen(modal)\n\t\t? closeModal(modal)\n\t\t: openModal(modal);\n};\n\n// Is modal open\nconst isModalOpen = modal => {\n\treturn modal.hasAttribute('open') && modal.getAttribute('open') != 'false'\n\t\t? true\n\t\t: false;\n};\n\n// Open modal\nconst openModal = modal => {\n\tif (isScrollbarVisible()) {\n\t\tdocument.documentElement.style.setProperty(\n\t\t\t'--scrollbar-width',\n\t\t\t`${getScrollbarWidth()}px`\n\t\t);\n\t}\n\tdocument.documentElement.classList.add(isOpenClass, openingClass);\n\tsetTimeout(() => {\n\t\tvisibleModal = modal;\n\t\tdocument.documentElement.classList.remove(openingClass);\n\t}, animationDuration);\n\tmodal.setAttribute('open', true);\n};\n\n// Close modal\nconst closeModal = modal => {\n\tvisibleModal = null;\n\tdocument.documentElement.classList.add(closingClass);\n\tsetTimeout(() => {\n\t\tdocument.documentElement.classList.remove(closingClass, isOpenClass);\n\t\tdocument.documentElement.style.removeProperty('--scrollbar-width');\n\t\tmodal.removeAttribute('open');\n\t}, animationDuration);\n};\n\n// Close with a click outside\ndocument.addEventListener('click', event => {\n\tif (visibleModal != null) {\n\t\tconst modalContent = visibleModal.querySelector('article');\n\t\tconst isClickInside = modalContent.contains(event.target);\n\t\t!isClickInside && closeModal(visibleModal);\n\t}\n});\n\n// Close with Esc key\ndocument.addEventListener('keydown', event => {\n\tif (event.key === 'Escape' && visibleModal != null) {\n\t\tcloseModal(visibleModal);\n\t}\n});\n\n// Get scrollbar width\nconst getScrollbarWidth = () => {\n\t// Creating invisible container\n\tconst outer = document.createElement('div');\n\touter.style.visibility = 'hidden';\n\touter.style.overflow = 'scroll'; // forcing scrollbar to appear\n\touter.style.msOverflowStyle = 'scrollbar'; // needed for WinJS apps\n\tdocument.body.appendChild(outer);\n\n\t// Creating inner element and placing it in the container\n\tconst inner = document.createElement('div');\n\touter.appendChild(inner);\n\n\t// Calculating difference between container's full width and the child width\n\tconst scrollbarWidth = outer.offsetWidth - inner.offsetWidth;\n\n\t// Removing temporary elements from the DOM\n\touter.parentNode.removeChild(outer);\n\n\treturn scrollbarWidth;\n};\n\n// Is scrollbar visible\nconst isScrollbarVisible = () => {\n\treturn document.body.scrollHeight > screen.height;\n};\n"],"names":["isOpenClass","openingClass","closingClass","animationDuration","visibleModal","toggleModal","event","preventDefault","modal","document","getElementById","target","getAttribute","isModalOpen","closeModal","openModal","hasAttribute","isScrollbarVisible","documentElement","style","setProperty","getScrollbarWidth","classList","add","setTimeout","remove","setAttribute","removeProperty","removeAttribute","addEventListener","querySelector","contains","key","outer","createElement","visibility","overflow","msOverflowStyle","body","appendChild","inner","scrollbarWidth","offsetWidth","parentNode","removeChild","scrollHeight","screen","height"],"version":3,"file":"index.cdcfef14.js.map"}